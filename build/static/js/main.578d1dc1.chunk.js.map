{"version":3,"sources":["components/register.js","components/login.js","components/Publict.js","components/showList.js","components/addList.js","components/Logout.js","components/user.js","App.js","serviceWorker.js","index.js"],"names":["register","state","name","username","email","password","text","this","setState","target","value","e","console","log","preventDefault","fetch","method","headers","Content-Type","body","JSON","stringify","_this2","react_default","a","createElement","className","Form_default","onSubmit","submitRegister","Row","Col","Control","placeholder","nameValue","onChange","handleName","required","userNameValue","handleUserName","emailValue","handleEmail","type","passwordValue","handlePassword","ButtonToolbar","Button","variant","Component","login","Object","objectSpread","then","response","ok","json","catch","err","responseJson","activity","localStorage","setItem","token","props","history","push","_this3","submitLogin","handleUsername","Publict","register_register","login_login","showList","data","getItem","token-access","res","list","id","window","location","reload","map","item","key","_id","onClick","handleDelete","addList","submitActivity","handleActivity","Logout","user","addList_addList","showList_showList","Logout_Logout","App","react_router_dom","react_router","exact","path","component","Public","User","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.578d1dc1.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {ButtonToolbar, Button} from 'react-bootstrap';\nimport Form from 'react-bootstrap/Form';\nimport {Grid, Col, Row }  from 'react-bootstrap';\n\nimport './style.css';\n\n\nexport default class register extends Component {\n  // constructor() {\n  // super();\n  // this.state = {\n  state = {\n    name : '',\n    username : '',\n    email : '',\n    password : ''\n  }\n\n  handleName(text) {\n    this.setState({ name: text.target.value })\n  }\n\n  handleUserName(text) {\n    this.setState({ username: text.target.value })\n  }\n\n  handleEmail(text) {\n    this.setState({ email: text.target.value })\n  }\n\n  handlePassword(text) {\n    this.setState({ password: text.target.value })\n  }\n\n  submitRegister(e) {\n    console.log(this.state)\n    e.preventDefault()\n\n    fetch('https://Todoappsaja.herokuapp.com/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(this.state)\n  })\n}\n  render() {\n    console.log(this.state)\n    return (\n      <div className=\"registerDiv\">\n        \n        <h4>Register</h4>\n        \n        <Form onSubmit={(e) => this.submitRegister(e)}>\n          <Row>\n            <Col>\n              <Form.Control \n                placeholder=\"name\" \n                name=\"name\" \n                value={this.state.nameValue} \n                onChange={(text) => { this.handleName(text) }}\n                required\n              />\n            </Col>\n          </Row>\n\n          <Row>\n            <Col>\n              <Form.Control \n                placeholder=\"username\" \n                name=\"userName\"\n                value={this.state.userNameValue}\n                onChange={(text) => { this.handleUserName(text) }}\n                required\n              />\n            </Col>\n          </Row>\n\n          <Row>\n            <Col>\n              <Form.Control \n                placeholder=\"email\" \n                name=\"email\"\n                value={this.state.emailValue}\n                onChange={(text) => { this.handleEmail(text) }}\n                required\n              />\n            </Col>\n          </Row>\n\n          <Row>\n            <Col>\n              <Form.Control \n                placeholder=\"password (minimum 5 characters)\"\n                name=\"password\"\n                type=\"password\"\n                value={this.state.passwordValue}\n                onChange={(text) => { this.handlePassword(text) }}\n                required\n              />\n            </Col>\n\n          </Row>\n\n        </Form><br/>\n\n        <ButtonToolbar>\n          <Button type=\"Submit\" variant=\"primary\">Register</Button>\n        </ButtonToolbar>\n\n        {/* <form onSubmit={(e) => this.submitRegister(e)}> */}\n          {/* <input placeholder=\"name\"\n            name=\"name\"\n            value={this.state.nameValue}\n            onChange={(text) => { this.handleName(text) }}\n            required\n          /><br/> */}\n\n          {/* <input placeholder=\"username\"\n            name=\"userName\"\n            value={this.state.userNameValue}\n            onChange={(text) => { this.handleUserName(text) }}\n            required\n          /><br/> */}\n\n          {/* <input placeholder=\"email\"\n            name=\"email\"\n            value={this.state.emailValue}\n            onChange={(text) => { this.handleEmail(text) }}\n            required\n          /><br/> */}\n\n          {/* <input placeholder=\"password (minimum 5 character)\"\n            name=\"password\"\n            type=\"password\"\n            value={this.state.passwordValue}\n            onChange={(text) => { this.handlePassword(text) }}\n            required\n          /><br/> */}\n          {/* <button type=\"submit\">Register</button> */}\n        {/* </form> */}\n\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\nimport './style.css';\nimport {ButtonToolbar, Button} from 'react-bootstrap';\nimport Form from 'react-bootstrap/Form';\nimport {Grid, Col, Row }  from 'react-bootstrap';\n\nexport default class login extends Component {\n  state = {\n    username: '',\n    password: ''\n  }\n\n  handleUsername(text) {\n    this.setState({ username: text.target.value })\n  }\n\n  handlePassword(text) {\n    this.setState({ password: text.target.value })\n  }\n\n  submitLogin(e) {\n    console.log(this.state)\n    e.preventDefault()\n\n    fetch('https://Todoappsaja.herokuapp.com/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body : JSON.stringify(\n        { ...this.state }\n      )        \n    })\n    //promise\n    .then((response) => {\n      if(response.ok){\n      return response.json();    \n      }\n      else{\n          throw response;\n      }\n      \n  })\n  .catch(err =>{\n     console.log(err)\n      })\n\n    .then( responseJson => {\n      this.setState({\n        activity : ''  \n      })\n      localStorage.setItem(\"id\", responseJson.token)\n      this.props.history.push(\"/user\")\n    })   \n\n  }\n\n  render() {\n    console.log(this.props)\n    return (\n      <div className=\"loginDiv\">\n        <h4>Log In</h4>\n\n        <Form onSubmit={(e) => this.submitLogin(e)}>\n          <Row>\n            <Col>\n              <Form.Control \n                placeholder=\"username\"\n                value={this.state.username}\n                onChange={(text) => { this.handleUsername(text) }}\n                required\n              />\n            </Col>\n          </Row>\n\n          <Row>\n            <Col>\n              <Form.Control \n                placeholder=\"password\"\n                type=\"password\"\n                value={this.state.password}\n                onChange={(text) => { this.handlePassword(text) }}\n                required\n              />\n            </Col>\n          </Row>\n          <br></br>\n            <Button>Login</Button>\n\n        </Form>\n        {/* \n        <ButtonToolbar>\n          <Button>Login</Button>\n        </ButtonToolbar> */}\n\n        {/* <form onSubmit={(e) => this.submitLogin(e)}> */}\n          {/* <input\n            placeholder=\"username\"\n            value={this.state.username}\n            onChange={(text) => { this.handleUsername(text) }}\n            required\n          /> */}\n\n          {/* <input\n            placeholder=\"password\"\n            type=\"password\"\n            value={this.state.password}\n            onChange={(text) => { this.handlePassword(text) }}\n            required\n          /> */}\n          {/* <button>Login</button> */}\n        {/* </form> */}\n\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Register from './register'\nimport Login from './login'\n\nexport default class Publict extends Component {\n  render() {\n      console.log(this.props)\n    return (\n      <div>\n        <Register  />\n        <Login history={this.props.history} />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n// import './style.css';\nexport default class showList extends Component {\n\n  state = {\n    data: []\n  }\n\n  // componentWillMount(){\n  //   this.fetchActivity()\n  // }\n\n  componentDidMount() {\n    let token = localStorage.getItem(\"id\")\n    fetch('https://Todoappsaja.herokuapp.com/user/showactivity', {\n      method: 'GET',\n      headers: {\n        'token-access': token,\n        'Content-Type': 'application/json',\n      },\n    })\n      .then(res => res.json())\n      .then(res => {\n        this.setState({\n          data: res.list\n        })\n        console.log(this.state.data)\n      })\n\n  }\n\n  handleDelete(id) {\n    console.log(id)\n    let token = localStorage.getItem(\"id\")\n    fetch('https://Todoappsaja.herokuapp.com/user/deleteactivity', {\n      method: \"DELETE\",\n      headers: {\n        'token-access': token,\n        'Content-Type': 'application/json'\n      },\n        \n      body: JSON.stringify({\n        'id': id\n      })\n    })\n    .then(res => {\n        // this.setState({\n        //   data: res.data\n        // })\n        window.location.reload()\n        console.log(\"addlist\",res)\n    })\n  }\n\n  render() {\n    console.log(\"data\",this.state.data)\n    return (\n      <div>\n        {/* <div className=\"todoactivitytestcontainer\">\n          <h2>Things need to be done!</h2>\n        </div> */}\n        {this.state.data.map(item => (\n          <div key={item._id}>{item.activity}\n            <button type=\"delete\" onClick={() => this.handleDelete(item._id)}>x</button>\n          </div>\n        ))}\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './style.css';\n\nexport default class addList extends Component {\n  state = {\n    activity: \"\"\n  }\n\n  handleActivity(text) {\n    this.setState({ activity: text.target.value })\n  }\n\n  submitActivity(e) {\n    console.log(this.state.activity)\n    e.preventDefault()\n    let token = localStorage.getItem(\"id\")\n    fetch('https://Todoappsaja.herokuapp.com/user/createactivity', {\n      \n      method: 'POST',\n      headers: {\n        'token-access': token,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(this.state)\n    })\n      .then(e => {\n        fetch('https://Todoappsaja.herokuapp.com/user/showactivity', {\n          method: 'GET',\n          headers: {\n            'token-access': token,\n            'Content-Type': 'application/json',\n          },\n        })\n          .then(res => res.json())\n          .then(res => {\n            // this.setState({\n            //   data: res.data\n            // })\n            window.location.reload()\n            console.log(\"addlist\",res)\n          })\n      })\n  }\n\n  render() {\n    console.log(this.state)\n    return (\n      <div className='addlistdiv'>\n        <h1 >What should we do next?</h1>\n        <form onSubmit={(e) => this.submitActivity(e)}>\n          <input\n            value={this.state.activity}\n            onChange={(text) => { this.handleActivity(text) }}\n            required className=\"inputBox\"\n          />\n          <button type=\"submit\">+</button>\n        </form>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Logout extends Component {\n  render() {\n    return (\n      <div>\n        <button>Log Out</button>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport ShowList from './showList';\nimport AddList from './addList';\nimport Logout from './Logout';\n\nexport default class user extends Component {\n  render() {\n    return (\n      <div>\n        <div>\n            <AddList />\n            <ShowList />\n        </div>\n        <br/>\n        <br/>\n        <br/>\n        <div>\n            <Logout />\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route, } from 'react-router-dom';\nimport Public from './components/Publict';\nimport User from './components/user';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <BrowserRouter>\n          <Switch>\n\n            {/* Everyone can access this page */}\n            <Route exact path=\"/\" component={ Public }/>\n\n            {/* User must log in to access this page */}\n            <Route path=\"/user\" component={ User }/>\n\n          </Switch>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}